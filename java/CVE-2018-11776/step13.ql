/**
 * @name Step 12: dataflow analysis with path and barrier
 * @kind path-problem
 */

import java
import semmle.code.java.dataflow.DataFlow
import DataFlow::PathGraph
import semmle.code.java.dataflow.TaintTracking

predicate isActionProxySource(MethodAccess ma) {
    exists(Method m, Method methodOverride |  
        m.getDeclaringType().hasQualifiedName("com.opensymphony.xwork2", "ActionProxy") 
        and methodOverride.overrides*(m)
        and ma.getMethod()=methodOverride
        and (
            m.getName()="getMethod" or
            m.getName()="getNamespace" or 
            m.getName()="getAction"
        ))
}

predicate isOgnlSink(Expr arg) {
    exists(MethodAccess ma, Method m | 
        ma.getMethod()=m and
        m.getName()="compileAndExecute" and
        ma.getArgument(0)=arg
    )
}

class OgnlCfg extends DataFlow::Configuration {
    OgnlCfg() {this="ognl"}

    override predicate isSource(DataFlow::Node source) {
        isActionProxySource(source.asExpr())
    }

    override predicate isSink(DataFlow::Node sink) {
        isOgnlSink(sink.asExpr())
    }

    override predicate isBarrier(DataFlow::Node node) {
        node.getEnclosingCallable().getDeclaringType().getName()="ValueStackShadowMap"
    }

    override predicate isAdditionalFlowStep(DataFlow::Node node1, DataFlow::Node node2) {
        TaintTracking::localTaintStep(node1, node2)
    }
}

from OgnlCfg config, DataFlow::PathNode source, DataFlow::PathNode sink
where config.hasFlowPath(source, sink)
select sink.getNode(), source, sink, "ognl inject"