/**
 * @name Step 12: dataflow analysis with path and barrier
 * @kind path-problem
 */

import java
import semmle.code.java.dataflow.DataFlow
import DataFlow::PathGraph

predicate isActionProxySource(MethodAccess ma) {
    exists(Method m, Method methodOverride |  m.getDeclaringType().hasQualifiedName("com.opensymphony.xwork2", "ActionProxy") 
    and methodOverride.overrides*(m)
    and ma.getMethod()=methodOverride
    and (
        m.getName()="getMethod" or
        m.getName()="getNamespace" or 
        m.getName()="getAction"
    ))
}

predicate isOgnlSink(Expr arg) {
    exists(MethodAccess ma, Method m | 
        ma.getMethod()=m and
        m.getName()="compileAndExecute" and
        ma.getArgument(0)=arg
    )
}

class OgnlCfg extends DataFlow::Configuration {
    OgnlCfg() {this="ognl"}

    override predicate isSource(DataFlow::Node source) {
        exists(MethodAccess ma |  
            source.asExpr() = ma
            and isActionProxySource(ma)
        )
    }

    override predicate isSink(DataFlow::Node sink) {
        exists(Expr arg | 
            sink.asExpr()=arg
            and isOgnlSink(arg)
        )
    }

    override predicate isBarrier(DataFlow::Node node) {
        node.getEnclosingCallable().getDeclaringType().getName()="ValueStackShadowMap"
    }
}

from OgnlCfg config, DataFlow::PathNode source, DataFlow::PathNode sink
where config.hasFlowPath(source, sink)
select sink.getNode(), source, sink, "ognl inject"